openapi: '3.0.2'
info:
  title: Authosization service
  version: '1.0'
servers:
  - url: https://api.server.test/v1
tags:
  - name: user
    description: User interaction
  - name: task
    description: Task interaction
paths:
  /user/create:
    post:
      tags:
        - user
      description: Create new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreds'
      responses:
        '201':
          description: User was successfully created
        '403':
          description: User with login already exists

  /user/update:
    put:
      tags:
        - user
      description: Update user info
      parameters:
        - $ref: '#/components/parameters/AuthToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
      responses:
        '200':
          description: User was successfully updated
        '401':
          description: Unauthorized
        '403':
          description: Invalid request
  /user/login:
    post:
      tags:
        - user
      description: Get auth token for user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreds'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '403':
          description: Invalid credentials

  /task/create:
    post:
      tags:
        - task
      description: Create new task
      parameters:
        - $ref: '#/components/parameters/AuthToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /task/update:
    put:
      tags:
        - task
      description: Update existing task
      parameters:
        - $ref: '#/components/parameters/AuthToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal error
  /task/delete:
    post:
      tags:
        - task
      description: Delete existing task
      parameters:
        - $ref: '#/components/parameters/AuthToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRequest'
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal error
  /task/get_task:
    get:
      tags:
        - task
      description: Get task by id
      parameters:
        - $ref: '#/components/parameters/AuthToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal error
  /task/get_tasks:
    get:
      tags:
        - task
      description: Get tasks by page
      parameters:
        - $ref: '#/components/parameters/AuthToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal error
components:
  parameters:
    AuthToken:
      in: header
      name: token
      schema:
        type: string
  schemas:
    UserCreds:
      type: object
      required:
        - login
        - password
      properties:
        login:
          description: Login
          type: string
        password:
          description: Password
          type: string
    UserInfo:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        birth:
          type: string
          format: date
        email:
          type: string
          format: email
        phone:
          type: string
    AuthToken:
      properties:
        token:
          type: string

    Task:
      properties:
        id:
          type: integer
        description:
          type: string
        status:
          type: string
        created_at:
          type: integer

    Tasks:
      type: array
      items:
        $ref: '#/components/schemas/Task'

    DeleteRequest:
      type: object
      properties:
        task_id:
          type: integer